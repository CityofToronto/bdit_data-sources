{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `tcl_speed_limit` table contained a version of the 2013 Toronto centreline with the posted speed limits. However, there were updates to the speed limit in certain areas of the city that were not reflected in this table. The table `speed_update` had all of the speed limit updates in the form of text. Every row described the street that the change took place on the intersections between which the change occurred. They did not have any geographic component. \n",
    "\n",
    "The general workflow was: \n",
    "1. Find the intersections between which the speed changes occured by matching the intersections described in the `speed_update` table to the `centreline_intersection` table\n",
    "2. Create line between the identified intersections\n",
    "3. Match the created lines to the appropriate centreline segment\n",
    "4. Update the matched centreline segments with their new speed limits \n",
    "\n",
    "The first step in updating the `tcl_speed_limit` table was to find the intersections between which the changes occured. Since there was no geographic component to the speed_update table, the only way to match the updates to appropriate intersections was through the text descriptions of the intersections. However, there were some formatting differences between the speed_update and centreline_intersection table, so the formatting of the speed_update table was altered and then the tables were joined using the PostgreSQL levenshtein fuzzy matching function. \n",
    "\n",
    "The speed_update table contained two text columns to indicate the location of the changes. The first was `highway`, which said which street the chnage occurred on. The second was `btwn`, which indicated between which intersections/streets/points the changes occureed along the highway street. \n",
    "\n",
    "The cell below contains the code that was used to create `btwn1`, `btwn2`, and to update the formatting of `btwn1`, `btwn2`, and `highway2` (which is a copy of highway) to better match the `centreline_intersection` table. "
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "-- split the btwn varibale into the two street names\n",
    "\n",
    "UPDATE vz_challenge.speed_update \n",
    "SET btwn1 = \n",
    "(CASE WHEN split_part(btwn, ' and ', 2) <> ''\n",
    "    THEN split_part(btwn, ' and ', 1)\n",
    "    ELSE split_part(btwn, ' to ', 1)\n",
    "    END),\n",
    "btwn2 = (CASE WHEN split_part(btwn, ' and ', 2) <> ''\n",
    "    THEN split_part(btwn, ' and ', 2)\n",
    "    ELSE split_part(btwn, ' to ', 2)\n",
    "    END);\n",
    "   \n",
    "   \n",
    "-- split centreline_intersection\n",
    "\n",
    "-- make my own copy of the table because it wont allow me to modify original\n",
    "SELECT * INTO crosic.centreline_intersection FROM gis.centreline_intersection; \n",
    "\n",
    "-- add new columns\n",
    "ALTER TABLE crosic.centreline_intersection ADD street1 text, ADD street2 text, ADD street3 text, ADD street4 text; \n",
    "\n",
    "-- split the intersec5 into two street names\n",
    "-- UPDATE crosic.centreline_intersection \n",
    "-- SET street1 = split_part(intersec5, ' / ', 1), street2 = split_part(intersec5, ' / ', 2);\n",
    "\n",
    "\n",
    "-- when 4 street names are needed\n",
    "UPDATE crosic.centreline_intersection \n",
    "SET street1 = (string_to_array(intersec5, ' / '))[1], street2 = (string_to_array(intersec5, ' / '))[2],\n",
    "street3 = ( \n",
    "CASE \n",
    "WHEN (array_length(string_to_array(intersec5, ' / '), 1) > 2)\n",
    "THEN (string_to_array(intersec5, ' / '))[3]\n",
    "ELSE ''\n",
    "END), \n",
    "street4 = ( \n",
    "CASE \n",
    "WHEN (array_length(string_to_array(intersec5, ' / '), 1) > 3)\n",
    "THEN (string_to_array(intersec5, ' / '))[4]\n",
    "ELSE ''\n",
    "END);\n",
    "\n",
    "\n",
    "-- fix btwn1\n",
    "\n",
    "-- try regex \n",
    "-- 'The (north|south|east|west|northwest|northeast|southwest|southeast) end of'\n",
    "-- https://www.ibm.com/support/knowledgecenter/en/SS8NLW_12.0.0/com.ibm.swg.im.infosphere.dataexpl.engine.doc/c_posix-regex-examples.html\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'The (north|south|east|west|northwest|northeast|southwest|southeast) end of ', '', 'g');\n",
    "\n",
    "-- replace stuff in brackets\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, '\\(.*\\)', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'A point [0123456789.]* metres (north|south|east|west|northwest|northeast|southwest|southeast) of ', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'A point [0123456789.]* metres (north|south|east|west|northwest|northeast|southwest|southeast) ', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'A point approximately [0123456789.]* metres (north|south|east|west|northwest|northeast|southwest|southeast) of ', '', 'g');\n",
    "\n",
    "-- make btwn1 it match centreline styling\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Drive', 'Dr', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Avenue', 'Ave', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Street', 'St', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Road', 'Rd', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Crescent', 'Cres', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Boulevard', 'Blvd', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'East', 'E', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'West', 'W', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'North', 'N', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'South', 'S', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Parkway', 'Pkwy', 'g')\n",
    "WHERE int_id1 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Place', 'Pl', 'g')\n",
    "WHERE int_id1 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Square', 'Sq', 'g')\n",
    "WHERE int_id1 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Circle', 'Crcl', 'g')\n",
    "WHERE int_id1 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Trail', 'Trl', 'g')\n",
    "WHERE int_id1 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn1 = regexp_REPLACE(btwn1, 'Gardens', 'Gdns', 'g')\n",
    "WHERE int_id1 = 0;\n",
    "\n",
    "\n",
    "\n",
    "-- fix btwn2 formatting \n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'The (north|south|east|west|northwest|northeast|southwest|southeast) end of ', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'the (north|south|east|west|northwest|northeast|southwest|southeast|north-east|north-west|south-east|south-west) end of ', '', 'g');\n",
    "\n",
    "-- replace stuff in brackets\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, '\\(.*\\)', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'A point [0123456789.]* metres (north|south|east|west|northwest|northeast|southwest|southeast) of ', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'A point [0123456789.]* metres (north|south|east|west|northwest|northeast|southwest|southeast) ', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'a point [0123456789.]* metres (north|south|east|west|northwest|northeast|southwest|southeast)', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'A point approximately [0123456789.]* metres (north|south|east|west|northwest|northeast|southwest|southeast) of ', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'a point approximately [0123456789.]* metres (north|south|east|west|northwest|northeast|southwest|southeast) of ', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Drive', 'Dr', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Avenue', 'Ave', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Street', 'St', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Road', 'Rd', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2= regexp_REPLACE(btwn2, 'Crescent', 'Cres', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Boulevard', 'Blvd', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'East', 'E', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'West', 'W', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'North', 'N', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'South', 'S', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Parkway', 'Pkwy', 'g')\n",
    "WHERE int_id2 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Place', 'Pl', 'g')\n",
    "WHERE int_id2 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Square', 'Sq', 'g')\n",
    "WHERE int_id2 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Circle', 'Crcl', 'g')\n",
    "WHERE int_id2 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Trail', 'Trl', 'g')\n",
    "WHERE int_id2 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET btwn2 = regexp_REPLACE(btwn2, 'Gardens', 'Gdns', 'g')\n",
    "WHERE int_id2 = 0;\n",
    "\n",
    "\n",
    "-- fix highway column\n",
    "\n",
    "-- replace stuff in brackets\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, '\\(.*\\)', '', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Drive', 'Dr', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Avenue', 'Ave', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Street', 'St', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Road', 'Rd', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Crescent', 'Cres', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Boulevard', 'Blvd', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'East', 'E', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'West', 'W', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'North', 'N', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'South', 'S', 'g');\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Parkway', 'Pkwy', 'g')\n",
    "WHERE int_id1 = 0 OR int_id2 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Place', 'Pl', 'g')\n",
    "WHERE int_id1 = 0 OR int_id2 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Square', 'Sq', 'g')\n",
    "WHERE int_id1 = 0 OR int_id2 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Circle', 'Crcl', 'g')\n",
    "WHERE int_id1 = 0 OR int_id2 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Trail', 'Trl', 'g')\n",
    "WHERE int_id1 = 0 OR int_id2 = 0;\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET highway2 = regexp_REPLACE(highway2, 'Gardens', 'Gdns', 'g')\n",
    "WHERE int_id1 = 0 OR int_id2 = 0;\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The cell below contains the code for doing the fuzzy matching. There were three queries completed, in a specific order. The queries were done in a specific order because the streets that were Cul de Sacs and pseudo-intersections were originally being incorrectly matched to streets that were not Cul de Sacs and pseudo-intersections. The query that was responsible for assigning the `oid1` to the intersection of `highway2` and `btwn1` is indicated with the `query1` column, and the query that was responsible for assigning the `oid2` to the intersection of `highway2` and `btwn2` is indicated with the `query2` column. "
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "UPDATE vz_challenge.speed_update\n",
    "SET query1 = 0; \n",
    "\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET query2 = 0; \n",
    "\n",
    "\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET oid1 = 0;\n",
    "\n",
    "-- part 2: now try and deal with pseudo streets that are unassigned \n",
    "WITH join1 AS \n",
    "(SELECT intersections.objectid AS oid1, vz_challenge.speed_update.id AS vzID\n",
    "FROM (SELECT DISTINCT objectid, street FROM  gis.centreline_intersection_streets WHERE gis.centreline_intersection_streets.classifi6 NOT IN ('SEUML','','CDSSL','SEUSL')) AS intersections, \n",
    "vz_challenge.speed_update\n",
    "WHERE (levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2) < 4 OR levenshtein(intersections.street, vz_challenge.speed_update.btwn1, 1, 1, 2) < 4) \n",
    "GROUP BY intersections.objectid, vz_challenge.speed_update.highway2, vz_challenge.speed_update.btwn1, vz_challenge.speed_update.id\n",
    "HAVING COUNT(intersections.street) > 1\n",
    "ORDER BY AVG(LEAST(levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2), levenshtein(intersections.street, vz_challenge.speed_update.btwn1, 1, 1, 2))))\n",
    "\n",
    "-- update with data from other table \n",
    "UPDATE vz_challenge.speed_update \n",
    "SET oid1 = join1.oid1\n",
    "FROM join1\n",
    "WHERE vz_challenge.speed_update.id = join1.vzID; \n",
    "\n",
    "\n",
    "-- raphs method, now with btwn2 \n",
    "\n",
    "-- reset int_id2\n",
    "UPDATE vz_challenge.speed_update\n",
    "SET oid2 = 0;\n",
    "\n",
    "\n",
    "WITH join2 AS\n",
    "(SELECT intersections.objectid AS oid2, vz_challenge.speed_update.id AS vzID\n",
    "FROM (SELECT DISTINCT objectid, street FROM  gis.centreline_intersection_streets WHERE gis.centreline_intersection_streets.classifi6 NOT IN ('SEUML','','CDSSL','SEUSL')) AS intersections, \n",
    "vz_challenge.speed_update\n",
    "WHERE (levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2) < 4 OR levenshtein(intersections.street, vz_challenge.speed_update.btwn2, 1, 1, 2) < 4) \n",
    "GROUP BY intersections.objectid, vz_challenge.speed_update.highway2, vz_challenge.speed_update.btwn2, vz_challenge.speed_update.id\n",
    "HAVING COUNT(intersections.street) > 1\n",
    "ORDER BY AVG(LEAST(levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2), levenshtein(intersections.street, vz_challenge.speed_update.btwn2, 1, 1, 2) )))\n",
    "\n",
    "\n",
    "-- update with data from other table \n",
    "UPDATE vz_challenge.speed_update \n",
    "SET oid2 = join2.oid2\n",
    "FROM join2\n",
    "WHERE vz_challenge.speed_update.id = join2.vzID;\n",
    "\n",
    "-- update query id\n",
    "UPDATE vz_challenge.speed_update \n",
    "SET query1 = 1\n",
    "WHERE oid1 <> 0; \n",
    "\n",
    "UPDATE vz_challenge.speed_update \n",
    "SET query2 = 1\n",
    "WHERE oid2 <> 0; \n",
    "\n",
    "-- btwn1\n",
    "WITH cds_querybtwn1 (oid1, vzID) AS \n",
    "(SELECT intersections.objectid AS oid1, vz_challenge.speed_update.id AS vzID\n",
    "FROM (SELECT DISTINCT objectid, street FROM  gis.centreline_intersection_streets WHERE gis.centreline_intersection_streets.classifi6 = 'CDSSL') AS intersections, \n",
    "vz_challenge.speed_update\n",
    "WHERE vz_challenge.speed_update.btwn1 = vz_challenge.speed_update.highway2 AND \n",
    "levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2) < 4 \n",
    "GROUP BY intersections.objectid, vz_challenge.speed_update.id\n",
    "HAVING COUNT(intersections.street) = 1\n",
    "ORDER BY AVG(levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2)))\n",
    "\n",
    "UPDATE vz_challenge.speed_update vz\n",
    "SET oid1 = cds.oid1\n",
    "FROM cds_querybtwn1 cds\n",
    "WHERE vz.id = cds.vzID AND vz.btwn1 = vz.highway2 and vz.oid1 = 0; \n",
    "\n",
    "\n",
    "-- btwn2\n",
    "WITH cds_querybtwn2 (oid2, vzID) AS \n",
    "(SELECT intersections.objectid AS oid2, vz_challenge.speed_update.id AS vzID\n",
    "FROM (SELECT DISTINCT objectid, street FROM gis.centreline_intersection_streets WHERE gis.centreline_intersection_streets.classifi6 = 'CDSSL') AS intersections, \n",
    "vz_challenge.speed_update\n",
    "WHERE vz_challenge.speed_update.btwn2 = vz_challenge.speed_update.highway2 AND \n",
    "levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2) < 4\n",
    "GROUP BY intersections.objectid,  vz_challenge.speed_update.id\n",
    "HAVING COUNT(intersections.street) = 1\n",
    "ORDER BY AVG(levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2)))\n",
    "\n",
    "UPDATE vz_challenge.speed_update vz\n",
    "SET oid2 = cds.oid2\n",
    "FROM cds_querybtwn2 cds\n",
    "WHERE vz.id = cds.vzID and btwn2 = highway2 and vz.oid2 = 0; \n",
    "\n",
    "\n",
    "-- update query id\n",
    "UPDATE vz_challenge.speed_update \n",
    "SET query1 = 2\n",
    "WHERE oid1 <> 0 AND query1 = 0; \n",
    "\n",
    "UPDATE vz_challenge.speed_update \n",
    "SET query2 = 2\n",
    "WHERE oid2 <> 0 AND query2 = 0; \n",
    "\n",
    "\n",
    "-- btwn1\n",
    "WITH cds_querybtwn1 (oid1, vzID) AS \n",
    "(SELECT intersections.objectid AS oid1, vz_challenge.speed_update.id AS vzID\n",
    "FROM (SELECT DISTINCT objectid, street FROM  gis.centreline_intersection_streets WHERE gis.centreline_intersection_streets.classifi6 IN ('SEUML','SEUSL')) AS intersections, \n",
    "vz_challenge.speed_update\n",
    "WHERE vz_challenge.speed_update.btwn1 = vz_challenge.speed_update.highway2 AND \n",
    "levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2) < 6 \n",
    "GROUP BY intersections.objectid, vz_challenge.speed_update.highway2, vz_challenge.speed_update.btwn1, vz_challenge.speed_update.id\n",
    "HAVING COUNT(intersections.street) = 1\n",
    "ORDER BY AVG(levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2)))\n",
    "\n",
    "UPDATE vz_challenge.speed_update vz\n",
    "SET oid1 = cds.oid1\n",
    "FROM cds_querybtwn1 cds\n",
    "WHERE vz.id = cds.vzID AND vz.btwn1 = vz.highway2 and vz.oid1 = 0; \n",
    "\n",
    "\n",
    "-- btwn2\n",
    "WITH cds_querybtwn2 (oid2, vzID) AS \n",
    "(SELECT intersections.objectid AS oid2, vz_challenge.speed_update.id AS vzID\n",
    "FROM (SELECT DISTINCT objectid, street FROM  gis.centreline_intersection_streets WHERE gis.centreline_intersection_streets.classifi6 IN ('SEUML','SEUSL')) AS intersections, \n",
    "vz_challenge.speed_update\n",
    "WHERE vz_challenge.speed_update.btwn2 = vz_challenge.speed_update.highway2 AND \n",
    "levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2) < 6\n",
    "GROUP BY intersections.objectid, vz_challenge.speed_update.highway2, vz_challenge.speed_update.btwn2, vz_challenge.speed_update.id\n",
    "HAVING COUNT(intersections.street) = 1\n",
    "ORDER BY AVG(levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2)))\n",
    "\n",
    "UPDATE vz_challenge.speed_update vz\n",
    "SET oid2 = cds.oid2\n",
    "FROM cds_querybtwn2 cds\n",
    "WHERE vz.id = cds.vzID and btwn2 = highway2 and vz.oid2 = 0; \n",
    "\n",
    "\n",
    "-- update query id\n",
    "UPDATE vz_challenge.speed_update \n",
    "SET query1 = 3\n",
    "WHERE oid1 <> 0 AND query1 = 0; \n",
    "\n",
    "UPDATE vz_challenge.speed_update \n",
    "SET query2 = 3\n",
    "WHERE oid2 <> 0 AND query2 = 0; \n",
    "\n",
    " \n",
    "\n",
    "-- btwn1\n",
    "WITH cds_querybtwn1 (oid1, vzID) AS \n",
    "(SELECT intersections.objectid AS oid1, vz_challenge.speed_update.id AS vzID\n",
    "FROM (SELECT DISTINCT objectid, street FROM  gis.centreline_intersection_streets WHERE gis.centreline_intersection_streets.classifi6 = 'SEUSL' AND gis.centreline_intersection_streets.elevatio10 = 'Pseudo') AS intersections, \n",
    "vz_challenge.speed_update\n",
    "WHERE (levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2) < 6 OR \n",
    "levenshtein(intersections.street, vz_challenge.speed_update.btwn1, 1, 1, 2) < 4) \n",
    "GROUP BY intersections.objectid, vz_challenge.speed_update.id\n",
    "HAVING COUNT(intersections.street) > 1\n",
    "ORDER BY AVG(LEAST(levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2), levenshtein(intersections.street, vz_challenge.speed_update.btwn1, 1, 1, 2))))\n",
    "\n",
    "UPDATE vz_challenge.speed_update vz\n",
    "SET oid1 = cds.oid1\n",
    "FROM cds_querybtwn1 cds\n",
    "WHERE vz.id = cds.vzID AND vz.btwn1 = vz.highway2 and vz.oid1 = 0; \n",
    "\n",
    "\n",
    "-- btwn2\n",
    "WITH cds_querybtwn2 (oid2, vzID) AS \n",
    "(SELECT intersections.objectid AS oid2, vz_challenge.speed_update.id AS vzID\n",
    "FROM (SELECT DISTINCT objectid, street FROM  gis.centreline_intersection_streets WHERE gis.centreline_intersection_streets.classifi6 = 'SEUSL' AND gis.centreline_intersection_streets.elevatio10 = 'Pseudo') AS intersections, \n",
    "vz_challenge.speed_update\n",
    "WHERE (levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2) < 4 OR \n",
    "levenshtein(intersections.street, vz_challenge.speed_update.btwn2, 1, 1, 2) < 4) \n",
    "GROUP BY intersections.objectid,  vz_challenge.speed_update.id\n",
    "HAVING COUNT(intersections.street) > 1\n",
    "ORDER BY AVG(LEAST(levenshtein(intersections.street, vz_challenge.speed_update.highway2, 1, 1, 2), \n",
    "levenshtein(intersections.street, vz_challenge.speed_update.btwn2, 1, 1, 2))))\n",
    "\n",
    "\n",
    "UPDATE vz_challenge.speed_update vz\n",
    "SET oid2 = cds.oid2\n",
    "FROM cds_querybtwn2 cds\n",
    "WHERE vz.id = cds.vzID and btwn2 = highway2 and vz.oid2 = 0; \n",
    "\n",
    "\n",
    "-- update query id\n",
    "UPDATE vz_challenge.speed_update \n",
    "SET query1 = 4\n",
    "WHERE oid1 <> 0 AND query1 = 0; \n",
    "\n",
    "UPDATE vz_challenge.speed_update \n",
    "SET query2 = 4\n",
    "WHERE oid2 <> 0 AND query2 = 0; \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the code that created the lines between the assigned intersections. "
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "DROP TABLE IF EXISTS crosic.bylaw_lines2; \n",
    "\n",
    "WITH latlong1 AS\n",
    "(SELECT oid1, oid2, crosic.centreline_intersection.latitude AS lat1, crosic.centreline_intersection.longitude AS long1, \n",
    "crosic.centreline_intersection.x AS easting1, crosic.centreline_intersection.y AS northing1,vz_challenge.speed_update.deleted,\n",
    "vz_challenge.speed_update.id, vz_challenge.speed_update.btwn, vz_challenge.speed_update.btwn1, vz_challenge.speed_update.btwn2, vz_challenge.speed_update.highway,\n",
    "vz_challenge.speed_update.highway2, vz_challenge.speed_update.speed_limit_km_per_hr new_speed\n",
    "FROM crosic.centreline_intersection JOIN  vz_challenge.speed_update ON crosic.centreline_intersection.objectid = vz_challenge.speed_update.oid1\n",
    "WHERE oid1 <> 0 and oid1 <> -1 and oid1 <> 9999 and deleted = 'FALSE'), \n",
    "\n",
    "latlong2 AS \n",
    "(SELECT latlong1.id, oid1, oid2, lat1, long1, northing1, easting1, latlong1.btwn1, latlong1.btwn2, latlong1.highway2,\n",
    "latlong1.new_speed, crosic.centreline_intersection.latitude AS lat2, crosic.centreline_intersection.longitude AS long2, crosic.centreline_intersection.x AS easting2, crosic.centreline_intersection.y AS northing2, latlong1.btwn, latlong1.highway\n",
    "FROM crosic.centreline_intersection JOIN latlong1 ON crosic.centreline_intersection.objectid = latlong1.oid2\n",
    "WHERE oid2 <> 0 and oid2 <> -1 and oid2 <> 9999 and deleted = 'FALSE')\n",
    "\n",
    "SELECT DISTINCT(latlong2.id), latlong2.oid1, latlong2.oid2, latlong2.lat1, latlong2.long1, latlong2.easting1, latlong2.northing1, latlong2.lat2, latlong2.long2, latlong2.easting2, latlong2.northing2,\n",
    "latlong2.btwn, latlong2.btwn1, latlong2.btwn2,latlong2.highway, latlong2.highway2,latlong2.new_speed,\n",
    "ST_MakeLine(ST_MakePoint(latlong2.long1, latlong2.lat1), ST_MakePoint(latlong2.long2, latlong2.lat2)) AS line, ST_LENGTH(ST_MakeLine(ST_MakePoint(easting1, northing1), ST_MakePoint(easting2, northing2))) AS length \n",
    "INTO crosic.bylaw_lines2\n",
    "FROM latlong2\n",
    "WHERE ST_LENGTH(ST_MakeLine(ST_MakePoint(easting1, northing1), ST_MakePoint(easting2, northing2))) > 11; "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next step was to take the lines and assign the lines to the centreline segments that match them. This process is called creating conflation networks. A buffer was placed around each line that was created in the previous step. The buffers were 3 times the length of line wide and had a flat endcap. If more than 90% of a centreline segment was locatied inside of the buffer and if the names of streets had a levenshtein distance of less than 4, then the centreline was added to the conflation network file. This file (`crosic.conflate2`) now holds all of the centreline segments from `tcl_speed_limit` that need to be updated."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "DROP TABLE IF EXISTS crosic.conflate2; \n",
    "\n",
    "SELECT DISTINCT ON(geo_id) geo_id, id AS bylaw_id, lf_name, btwn, highway, highway2, geom, new_speed\n",
    "INTO crosic.conflate2\n",
    "\n",
    "FROM crosic.bylaw_lines2 b INNER JOIN gis.tcl_speed_limit s \n",
    "ON \n",
    "ST_DWithin( ST_Transform(s.geom, 32190) ,  ST_BUFFER(ST_Transform(ST_SetSRID(line, 4326), 32190), 3*b.length, 'endcap=flat join=round') , 10)\n",
    "\n",
    "WHERE levenshtein(LOWER(b.highway2), LOWER(s.lf_name), 1, 1, 2) < 4 \n",
    "AND ST_Length(st_intersection(ST_BUFFER(ST_Transform(ST_SetSRID(line, 4326), 32190), 3*b.length, 'endcap=flat join=round') , ST_Transform(s.geom, 32190))) /ST_Length(ST_Transform(s.geom, 32190)) > 0.9\n",
    "ORDER BY geo_id; \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
